; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\j\Desktop\Fall2020\CompOrg\Labs\Lab5\Lab5.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?gSecret@@3PADA					; gSecret
msvcjmc	SEGMENT
__7242C389_ctype@h DB 01H
__90A1F774_basetsd@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__0D001789_processthreadsapi@h DB 01H
__F972325D_memoryapi@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__376EBCA0_winioctl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2CCBBE23_propidl@h DB 01H
__AD360DAF_oleauto@h DB 01H
__0396F1A5_stralign@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__2D9592F7_Lab5@cpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?gSecret@@3PADA DB 'A computer once beat me at chess, but it was no match'
	DB	' for me at kick boxing.', 00H		; gSecret
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?searchString@@YA_NPAD0G@Z			; searchString
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0FF@GMAMMAPK@?6?6Enter?5the?5program?5name?5follow@ ; `string'
PUBLIC	??_C@_0CO@GEKEIFAF@Hint?3?5Computer?5vs?4?5Human?5in?5a?5g@ ; `string'
PUBLIC	??_C@_0CB@MILJBBJN@Hint?3?5Mike?5Tyson?5player?5soccer?4@ ; `string'
PUBLIC	??_C@_0BO@OELOFDCC@?$CFs?5?$DMyour?5string?0?5no?5spaces?$DO?6?6@ ; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	??_C@_0CN@FJOOGALO@Success?$CB?5The?5string?5?$CC?$CFs?$CC?5is?5in?5@ ; `string'
PUBLIC	??_C@_0CM@NONOBBNH@Failure?5?9?5your?5string?5?$CC?$CFs?$CC?5was?5@ ; `string'
EXTRN	_strlen:PROC
EXTRN	_exit:PROC
EXTRN	_system:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CM@NONOBBNH@Failure?5?9?5your?5string?5?$CC?$CFs?$CC?5was?5@
CONST	SEGMENT
??_C@_0CM@NONOBBNH@Failure?5?9?5your?5string?5?$CC?$CFs?$CC?5was?5@ DB 'F'
	DB	'ailure - your string "%s" was not found.', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@FJOOGALO@Success?$CB?5The?5string?5?$CC?$CFs?$CC?5is?5in?5@
CONST	SEGMENT
??_C@_0CN@FJOOGALO@Success?$CB?5The?5string?5?$CC?$CFs?$CC?5is?5in?5@ DB 'S'
	DB	'uccess! The string "%s" is in the string!', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OELOFDCC@?$CFs?5?$DMyour?5string?0?5no?5spaces?$DO?6?6@
CONST	SEGMENT
??_C@_0BO@OELOFDCC@?$CFs?5?$DMyour?5string?0?5no?5spaces?$DO?6?6@ DB '%s '
	DB	'<your string, no spaces>', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MILJBBJN@Hint?3?5Mike?5Tyson?5player?5soccer?4@
CONST	SEGMENT
??_C@_0CB@MILJBBJN@Hint?3?5Mike?5Tyson?5player?5soccer?4@ DB 'Hint: Mike '
	DB	'Tyson player soccer.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GEKEIFAF@Hint?3?5Computer?5vs?4?5Human?5in?5a?5g@
CONST	SEGMENT
??_C@_0CO@GEKEIFAF@Hint?3?5Computer?5vs?4?5Human?5in?5a?5g@ DB 'Hint: Com'
	DB	'puter vs. Human in a game, who won?', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@GMAMMAPK@?6?6Enter?5the?5program?5name?5follow@
CONST	SEGMENT
??_C@_0FF@GMAMMAPK@?6?6Enter?5the?5program?5name?5follow@ DB 0aH, 0aH, 'E'
	DB	'nter the program name followed by a string to help you guess '
	DB	'the secret string.', 0aH, 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\j\Desktop\Fall2020\CompOrg\Labs\Lab5\Lab5.cpp
;	COMDAT _main
_TEXT	SEGMENT
_wordLength$ = -20					; size = 4
_stringCompareResult$ = -5				; size = 1
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2D9592F7_Lab5@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 100  : 	bool stringCompareResult;
; 101  : 	int wordLength;
; 102  : 
; 103  : 	if (argc != 2)

  00028	83 7d 08 02	 cmp	 DWORD PTR _argc$[ebp], 2
  0002c	74 57		 je	 SHORT $LN2@main

; 104  : 	{
; 105  : 		printf("\n\nEnter the program name followed by a string to help you guess the secret string.\n\n");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@GMAMMAPK@?6?6Enter?5the?5program?5name?5follow@
  00033	e8 00 00 00 00	 call	 _printf
  00038	83 c4 04	 add	 esp, 4

; 106  : 		printf("Hint: Computer vs. Human in a game, who won?\n");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@GEKEIFAF@Hint?3?5Computer?5vs?4?5Human?5in?5a?5g@
  00040	e8 00 00 00 00	 call	 _printf
  00045	83 c4 04	 add	 esp, 4

; 107  : 		printf("Hint: Mike Tyson player soccer.\n");

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MILJBBJN@Hint?3?5Mike?5Tyson?5player?5soccer?4@
  0004d	e8 00 00 00 00	 call	 _printf
  00052	83 c4 04	 add	 esp, 4

; 108  : 		printf("%s <your string, no spaces>\n\n", argv[0]);

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	6b c8 00	 imul	 ecx, eax, 0
  0005d	8b 55 0c	 mov	 edx, DWORD PTR _argv$[ebp]
  00060	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OELOFDCC@?$CFs?5?$DMyour?5string?0?5no?5spaces?$DO?6?6@
  00069	e8 00 00 00 00	 call	 _printf
  0006e	83 c4 08	 add	 esp, 8

; 109  : 		system("pause");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  00076	e8 00 00 00 00	 call	 _system
  0007b	83 c4 04	 add	 esp, 4

; 110  : 		exit(-1);

  0007e	6a ff		 push	 -1
  00080	e8 00 00 00 00	 call	 _exit
$LN2@main:

; 111  : 	}
; 112  : 
; 113  : 	wordLength = strlen(argv[1]);

  00085	b8 04 00 00 00	 mov	 eax, 4
  0008a	c1 e0 00	 shl	 eax, 0
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  00090	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 _strlen
  00099	83 c4 04	 add	 esp, 4
  0009c	89 45 ec	 mov	 DWORD PTR _wordLength$[ebp], eax

; 114  : 
; 115  : 	stringCompareResult = searchString(gSecret, argv[1], wordLength);	// this length is arbitrary

  0009f	0f b7 45 ec	 movzx	 eax, WORD PTR _wordLength$[ebp]
  000a3	50		 push	 eax
  000a4	b9 04 00 00 00	 mov	 ecx, 4
  000a9	c1 e1 00	 shl	 ecx, 0
  000ac	8b 55 0c	 mov	 edx, DWORD PTR _argv$[ebp]
  000af	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000b2	50		 push	 eax
  000b3	68 00 00 00 00	 push	 OFFSET ?gSecret@@3PADA	; gSecret
  000b8	e8 00 00 00 00	 call	 ?searchString@@YA_NPAD0G@Z ; searchString
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	88 45 fb	 mov	 BYTE PTR _stringCompareResult$[ebp], al

; 116  : 
; 117  : 	if (stringCompareResult)

  000c3	0f b6 45 fb	 movzx	 eax, BYTE PTR _stringCompareResult$[ebp]
  000c7	85 c0		 test	 eax, eax
  000c9	74 1e		 je	 SHORT $LN3@main

; 118  : 		printf("Success! The string \"%s\" is in the string!\n\n", argv[1]);

  000cb	b8 04 00 00 00	 mov	 eax, 4
  000d0	c1 e0 00	 shl	 eax, 0
  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  000d6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@FJOOGALO@Success?$CB?5The?5string?5?$CC?$CFs?$CC?5is?5in?5@
  000df	e8 00 00 00 00	 call	 _printf
  000e4	83 c4 08	 add	 esp, 8
  000e7	eb 1c		 jmp	 SHORT $LN4@main
$LN3@main:

; 119  : 	else
; 120  : 		printf("Failure - your string \"%s\" was not found.\n\n", argv[1]);

  000e9	b8 04 00 00 00	 mov	 eax, 4
  000ee	c1 e0 00	 shl	 eax, 0
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  000f4	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000f7	52		 push	 edx
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NONOBBNH@Failure?5?9?5your?5string?5?$CC?$CFs?$CC?5was?5@
  000fd	e8 00 00 00 00	 call	 _printf
  00102	83 c4 08	 add	 esp, 8
$LN4@main:

; 121  : 
; 122  : 	system("pause");

  00105	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  0010a	e8 00 00 00 00	 call	 _system
  0010f	83 c4 04	 add	 esp, 4

; 123  : 	return 0;

  00112	33 c0		 xor	 eax, eax
$LN5@main:

; 124  : } // main

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\j\Desktop\Fall2020\CompOrg\Labs\Lab5\Lab5.cpp
;	COMDAT ?searchString@@YA_NPAD0G@Z
_TEXT	SEGMENT
_result$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_string2Search$ = 8					; size = 4
_searchWord$ = 12					; size = 4
_wordLength$ = 16					; size = 2
?searchString@@YA_NPAD0G@Z PROC				; searchString, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 14   : 	bool result = false;

  00028	c6 45 f7 00	 mov	 BYTE PTR _result$[ebp], 0

; 15   : 
; 16   : 	__asm
; 17   : 	{
; 18   : 		xor eax, eax

  0002c	33 c0		 xor	 eax, eax

; 19   : 		mov esi, searchWord

  0002e	8b 75 0c	 mov	 esi, DWORD PTR _searchWord$[ebp]

; 20   : 		test esi, esi

  00031	85 f6		 test	 esi, esi

; 21   : 		je NOT_FOUND

  00033	74 29		 je	 SHORT $NOT_FOUND$3

; 22   : 
; 23   : 		mov edi, string2Search

  00035	8b 7d 08	 mov	 edi, DWORD PTR _string2Search$[ebp]

; 24   : 		test edi, edi

  00038	85 ff		 test	 edi, edi

; 25   : 		je NOT_FOUND

  0003a	74 22		 je	 SHORT $NOT_FOUND$3

; 26   : 
; 27   : 		mov al, byte ptr[esi]

  0003c	8a 06		 mov	 al, BYTE PTR [esi]

; 28   : 		test al, al

  0003e	84 c0		 test	 al, al

; 29   : 		je NOT_FOUND

  00040	74 1c		 je	 SHORT $NOT_FOUND$3
$MAIN_LOOP$4:

; 30   : 
; 31   : 		MAIN_LOOP :
; 32   : 		mov al, byte ptr[edi]

  00042	8a 07		 mov	 al, BYTE PTR [edi]

; 33   : 			test al, al

  00044	84 c0		 test	 al, al

; 34   : 			je NOT_FOUND

  00046	74 16		 je	 SHORT $NOT_FOUND$3

; 35   : 
; 36   : 			mov bl, byte ptr[esi]

  00048	8a 1e		 mov	 bl, BYTE PTR [esi]

; 37   : 			cmp al, bl

  0004a	3a c3		 cmp	 al, bl

; 38   : 			jne NEXT_CHAR

  0004c	75 09		 jne	 SHORT $NEXT_CHAR$5

; 39   : 
; 40   : 			call CHECK_THE_WORD

  0004e	e8 12 00 00 00	 call	 $CHECK_THE_WORD$6

; 41   : 			test al, al

  00053	84 c0		 test	 al, al

; 42   : 			jne FOUND

  00055	75 03		 jne	 SHORT $FOUND$7
$NEXT_CHAR$5:

; 43   : 
; 44   : 			NEXT_CHAR :
; 45   : 		inc edi

  00057	47		 inc	 edi

; 46   : 			jmp MAIN_LOOP

  00058	eb e8		 jmp	 SHORT $MAIN_LOOP$4
$FOUND$7:

; 47   : 
; 48   : 			FOUND :
; 49   : 		mov al, 1

  0005a	b0 01		 mov	 al, 1

; 50   : 			jmp EXIT_FUNC

  0005c	eb 02		 jmp	 SHORT $EXIT_FUNC$8
$NOT_FOUND$3:

; 51   : 
; 52   : 			NOT_FOUND :
; 53   : 		xor al, al

  0005e	32 c0		 xor	 al, al
$EXIT_FUNC$8:

; 54   : 
; 55   : 			EXIT_FUNC :
; 56   : 		mov result, al

  00060	88 45 f7	 mov	 BYTE PTR _result$[ebp], al

; 57   : 			jmp DONE

  00063	eb 24		 jmp	 SHORT $DONE$9
$CHECK_THE_WORD$6:

; 58   : 
; 59   : 			///////////////////////////////////////////////////
; 60   : 			CHECK_THE_WORD :
; 61   : 		push edi

  00065	57		 push	 edi

; 62   : 			push esi

  00066	56		 push	 esi

; 63   : 
; 64   : 			mov cx, wordLength

  00067	66 8b 4d 10	 mov	 cx, WORD PTR _wordLength$[ebp]

; 65   : 			movzx ecx, cx

  0006b	0f b7 c9	 movzx	 ecx, cx

; 66   : 			mov al, 1

  0006e	b0 01		 mov	 al, 1

; 67   : 			dec ecx

  00070	49		 dec	 ecx

; 68   : 			je EXIT_CHECK_THE_WORD

  00071	74 13		 je	 SHORT $EXIT_CHECK_THE_WORD$10
$WORD_CHECK$11:

; 69   : 
; 70   : 			WORD_CHECK :
; 71   : 		inc esi

  00073	46		 inc	 esi

; 72   : 			inc edi

  00074	47		 inc	 edi

; 73   : 			mov al, [edi]

  00075	8a 07		 mov	 al, BYTE PTR [edi]

; 74   : 			mov bl, [esi]

  00077	8a 1e		 mov	 bl, BYTE PTR [esi]

; 75   : 			cmp al, bl

  00079	3a c3		 cmp	 al, bl

; 76   : 			jne NO_MATCH

  0007b	75 07		 jne	 SHORT $NO_MATCH$12

; 77   : 
; 78   : 			dec ecx

  0007d	49		 dec	 ecx

; 79   : 			jne WORD_CHECK

  0007e	75 f3		 jne	 SHORT $WORD_CHECK$11

; 80   : 
; 81   : 			mov al, 1

  00080	b0 01		 mov	 al, 1

; 82   : 			jmp EXIT_CHECK_THE_WORD

  00082	eb 02		 jmp	 SHORT $EXIT_CHECK_THE_WORD$10
$NO_MATCH$12:

; 83   : 
; 84   : 			NO_MATCH :
; 85   : 		xor al, al

  00084	32 c0		 xor	 al, al
$EXIT_CHECK_THE_WORD$10:

; 86   : 
; 87   : 			EXIT_CHECK_THE_WORD :
; 88   : 		pop esi

  00086	5e		 pop	 esi

; 89   : 			pop edi

  00087	5f		 pop	 edi

; 90   : 			ret

  00088	c3		 ret	 0
$DONE$9:

; 91   : 	}
; 92   : DONE:
; 93   : 	return result;

  00089	8a 45 f7	 mov	 al, BYTE PTR _result$[ebp]

; 94   : } // searchString

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	33 cd		 xor	 ecx, ebp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?searchString@@YA_NPAD0G@Z ENDP				; searchString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	6a 01		 push	 1
  0003a	e8 00 00 00 00	 call	 ___acrt_iob_func
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 __vfprintf_l
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0004e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00055	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00040	51		 push	 ecx
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00049	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
